version: 2.1

orbs: 
  slack: circleci/slack@4.5.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stackId:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.stackId >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.stackId >>  
 
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      stackId:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: 715e4665-d5cf-4a77-b925-257c5cdd9bb35" --request GET https://api.memstash.io/values/migration_<< parameters.stackId >>)
            if (( $SUCCESS == "AllGood" ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend
            npm install
            npm run test          

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            npm run test          

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install needed os utilities
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            pwd
            ls -altr
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            echo "inventory.txt"
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          stackId: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/      # Add ssh keys with fingerprint
      - add_ssh_keys:
          # add the svr ssh key fingersprint (i added the ssh from the pem file into circleci manaually)
          fingerprints: ["5e:e5:8c:b1:6c:3b:b7:98:e9:f0:76:47:c7:22:6b:eb"]
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd && ls -ltr
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          stackId: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update
            sudo apt install curl -y 
            sudo apt install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            /usr/local/bin/aws --version
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            pwd
            cd backend
            pwd
            ls -ltr
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 715e4665-d5cf-4a77-b925-257c5cdd9bb3" --request PUT --data "AllGood" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H "token: 715e4665-d5cf-4a77-b925-257c5cdd9bb3" --request PUT --data "OhDear" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "migration_${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          stackId: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update
            sudo apt install curl -y 
            sudo apt install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            /usr/local/bin/aws --version
      - run:
          name: Install needed os utilities
          command: sudo apt-get install -y tar gzip
      - run:
          name: Install NPM
          command: |
            pwd
            cd frontend
            pwd
            ls -ltr
            npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "${API_URL}" >> frontend/.env
            cat frontend/.env 
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          stackId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          stackId: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install needed os utilities
          command: |
            apk update
            apk upgrade
            apk add --update gzip curl nodejs npm bash
            pip install awscli
      - run:
          name: Install NPM
          command: |
            pwd
            cd backend
            pwd
            ls -ltr
            npm install
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          # add the svr ssh key fingersprint (i added the ssh from the pem file into circleci manaually)
          fingerprints: ["5e:e5:8c:b1:6c:3b:b7:98:e9:f0:76:47:c7:22:6b:eb"]
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
            pwd
            echo "steve"
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          stackId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          stackId: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            #curl, nodejs, npm, or awscli.
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            echo "${BACKEND_IP}"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            echo "${BACKEND_IP}"
            
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          stackId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          stackId: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend:
          context: udacity_context
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         # filters:
         #   branches:
         #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]

